<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="4;o?jrf}qxp##t*9/{H+" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="AYcl;rO2jbo?vTQ81}^}" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace EasyCbp" line1="{" line2="    let i2cAddr: number = 0x10;" line3="    let forwardSteeringCorrection = 0;" line4="    let backwardSteeringCorrection = 0;" line5="    let distanceCorrection = 0;" line6="" line7="    export enum DriveDirection {" line8="        //%block=&quot;forward&quot;" line9="        Forward = 1," line10="        //%block=&quot;reverse&quot;" line11="        Backward = 0" line12="    }" line13="" line14="    export enum DistanceUnits {" line15="        //%block=&quot;cm&quot;" line16="        Cm = 0," line17="        //%block=&quot;inch&quot;" line18="        Inch = 1," line19="    }" line20="" line21="    //% group=&quot;Drive&quot;" line22="    //% block=&quot;drive %direction for %distance %distanceUnits speed %speed&quot;" line23="    //% speed.min=0 speed.max=100" line24="    //% weight=80" line25="    export function driveDistance(direction: DriveDirection, distance: number, distanceUnits: DistanceUnits, speed: number): void {" line26="        if (distanceUnits == DistanceUnits.Cm)" line27="            distance = distance;" line28="        else if (distanceUnits == DistanceUnits.Inch)" line29="            distance = distance * 2.54;" line30="" line31="        let steeringCorrection = forwardSteeringCorrection;" line32="        let distCorrection = (100 + distanceCorrection) / 100;" line33="        let targetDegrees = (360 / 15.865) * distance * distCorrection;" line34="" line35="        if (direction == DriveDirection.Backward)" line36="        {" line37="            steeringCorrection = backwardSteeringCorrection;" line38="            speed = speed * -1;" line39="        }" line40="       " line41="        CutebotPro.clearWheelTurn(CutebotProMotors1.M1);" line42="        CutebotPro.pwmCruiseControl(speed + steeringCorrection, speed);" line43="" line44="        while(CutebotPro.readDistance(CutebotProMotors1.M1) &lt; targetDegrees)" line45="        {" line46="            basic.pause(100);" line47="        }" line48="" line49="        CutebotPro.stopImmediately(CutebotProMotors.ALL);" line50="    }" line51="" line52="    //% group=&quot;Drive&quot;" line53="    //% block=&quot;set steering correction %direction to %correction \\%&quot;" line54="    //% weight=90" line55="    export function setSteeringCorrection(direction: DriveDirection, correction: number): void{" line56="        if(direction = DriveDirection.Forward)" line57="        {" line58="            forwardSteeringCorrection = correction;" line59="        }" line60="        else{" line61="            backwardSteeringCorrection = correction;" line62="        }" line63="    }" line64="" line65="    //% group=&quot;Turn&quot;" line66="    //% block=&quot;set steering correction %direction to %correction \\%&quot;" line67="    //% weight=70" line68="    export function turn(direction: DriveDirection, correction: number): void {" line69="        if (direction = DriveDirection.Forward) {" line70="            forwardSteeringCorrection = correction;" line71="        }" line72="        else {" line73="            backwardSteeringCorrection = correction;" line74="        }" line75="    }" line76="" line77="    /**" line78=" * set the trolley to rotate at a specific Angle" line79=" */" line80="    //% group=&quot;PID Control&quot;" line81="    //% weight=190" line82="    //% block=&quot;set car %CutebotProTurn for angle %CutebotProAngle&quot;" line83="    export function trolleySteering(turn: CutebotProTurn, angle: number): void {" line84="        let buf = pins.createBuffer(7)" line85="        let curtime = 0" line86="        let oldtime = 0" line87="        let tempangle = 0" line88="        let orientation = 0" line89="        let cmd = 0" line90="        CutebotPro.pwmCruiseControl(0, 0)" line91="        basic.pause(1000)" line92="" line93="        tempangle = Math.map(angle, 0, 180, 0, 630);" line94="" line95="        if (turn == CutebotProTurn.Left) {" line96="            orientation = CutebotProWheel.RightWheel" line97="            cmd = 0x04" line98="        }" line99="        else if (turn == CutebotProTurn.Right) {" line100="            orientation = CutebotProWheel.LeftWheel" line101="            cmd = 0x04" line102="        }" line103="        else {" line104="            orientation = CutebotProWheel.AllWheel" line105="            cmd = 23" line106="            tempangle = tempangle + 4" line107="        }" line108="" line109="        buf[0] = 0x99;" line110="        buf[1] = cmd;" line111="        buf[2] = orientation;" line112="        buf[3] = (tempangle &gt;&gt; 8) &amp; 0xff;" line113="        buf[4] = (tempangle &gt;&gt; 0) &amp; 0xff;" line114="        if (turn == CutebotProTurn.RightInPlace)" line115="            buf[5] = 0x00;" line116="        else" line117="            buf[5] = 0x01;" line118="        buf[6] = 0x88;" line119="        pins.i2cWriteBuffer(i2cAddr, buf)" line120="        basic.pause(1000)" line121="        while (1) {" line122="            if (CutebotPro.readSpeed(CutebotProMotors1.M1, CutebotProSpeedUnits.Cms) == 0 &amp;&amp; CutebotPro.readSpeed(CutebotProMotors1.M2, CutebotProSpeedUnits.Cms) == 0) {" line123="                basic.pause(1000)" line124="                if (CutebotPro.readSpeed(CutebotProMotors1.M1, CutebotProSpeedUnits.Cms) == 0 &amp;&amp; CutebotPro.readSpeed(CutebotProMotors1.M2, CutebotProSpeedUnits.Cms) == 0)" line125="                    break" line126="            }" line127="" line128="        }" line129="        basic.pause(1000)" line130="    }" line131="}" numlines="132"></mutation></block></statement></block></xml>